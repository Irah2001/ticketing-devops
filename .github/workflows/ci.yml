name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10.5
        env:
          MARIADB_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MARIADB_DATABASE: ${{ secrets.DB_NAME }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=3

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.18.1'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Wait for MariaDB
      run: |
        sudo apt-get update && sudo apt-get install -y mariadb-client
        until mysqladmin ping -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} --silent; do
          echo "Waiting for MariaDB..."
          sleep 2
        done
      env:
        MYSQL_PWD: root

    - name: Seed database
      run: node fixtures/seed.js
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}

    - name: Run unit tests
      run: npm test

    - name: Run E2E tests
      uses: cypress-io/github-action@v2
      with:
        start: npm start
        wait-on: 'http://localhost:3000'
        spec: tests/e2e/ticketing.cy.js
        config-file: cypress.config.js
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        ADMIN_USER: ${{ secrets.ADMIN_USER }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/ticketing-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/ticketing-app:latest
          docker stop ticketing-app || true
          docker rm ticketing-app || true
          docker run -d --name ticketing-app -p 3000:3000 -e ADMIN_USER=${{ secrets.ADMIN_USER }} -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }} -e DB_HOST=${{ secrets.DB_HOST }} -e DB_USER=${{ secrets.DB_USER }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_NAME=${{ secrets.DB_NAME }} ${{ secrets.DOCKER_USERNAME }}/ticketing-app:latest